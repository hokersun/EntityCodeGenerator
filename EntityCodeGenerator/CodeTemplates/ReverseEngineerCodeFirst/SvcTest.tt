<#@ template hostspecific="true" language="C#" #>
<#@
 output extension=".cs" #><#

    var efHost = (EfTextTemplateHost)Host;
    var code = new CodeGenerationTools(this);
	var codeK2 = new CodeGenerationToolsForK2(this);
#>
<#@ import namespace="EntityCodeGenerator.Template"#>
<#@ import namespace="System.Collections.Generic"#>
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
<# 
	var keyType = code.Escape(efHost.PrimaryKey.TypeUsage);
    var keyName = efHost.PrimaryKey.Name;
	var entityName = efHost.EntityName;
	var svcName = entityName+"Svc";
 #>
namespace <#=code.EscapeNamespace(efHost.SvcNamespace)#>.Tests
{
    [TestClass]
    public class <#= svcName #>Test
    {
        [TestMethod]
        public void CreateTest()
        {
            var result = Create();
        }

        [TestMethod]
        public void ReadTest()
        {
            var result = Create();

            var obj = SMOServiceHelper.InitSvc<<#= svcName#>>();
            obj.<#=keyName#> = result.<#=keyName#>;
            var result2 = obj.Read();

            EntityEqual(result, result2);
        }

        [TestMethod]
        public void UpdateTest()
        {
            var result = Create();

            var obj = SMOServiceHelper.InitSvc<<#=svcName#>>();
            obj.<#=keyName#> = result.<#=keyName#>;
            result = obj.Read();

            var oldValue = result.AttachmentType;
            var newValue = result.AttachmentType + "_new";
            result.AttachmentType = newValue;
            obj.Update();

            result = obj.Read();
            Assert.AreEqual(result.AttachmentType, newValue);
        }

        [TestMethod]
        public void DeleteTest()
        {
            var result = Create();

            var obj = SMOServiceHelper.InitSvc<<#=svcName#>>();
            obj.<#=keyName#> = result.<#=keyName#>;
            result = obj.Read();
            Assert.IsNotNull(result);

            var obj2 = SMOServiceHelper.InitSvc<<#=svcName#>>();
            obj2.<#=keyName#> = result.<#=keyName#>;
            obj2.Delete();

            result = obj2.Read();
            Assert.IsNull(result);
        }

        [TestMethod]
        public void ListTest()
        {
            var obj = SMOServiceHelper.InitSvc<<#=svcName#>>();
            var result = obj.List();
            Assert.IsTrue(result.Count > 0);
        }

        private void EntityEqual(<#=svcName#> obj1, <#=svcName#> obj2)
        {
            Assert.IsNotNull(obj1);
            Assert.IsNotNull(obj2);

            var entity1 = obj1.ConvertToEntity();
            var entity2 = obj2.ConvertToEntity();
<#			foreach (var property in efHost.EntityType.Properties)
			{
				var typeUsage = code.Escape(property.TypeUsage);
				var propertyName = code.Escape(property);
				
#>
            Assert.AreEqual(entity1.<#=propertyName#>, entity2.<#=propertyName#>);
<#			}
#>
        }

		private CommonAttachmentsConfigSvc Create()
        {
            var obj = SMOServiceHelper.InitSvc<<#= svcName#>>();
<#			foreach (var property in efHost.EntityType.Properties)
			{
				var typeUsage = code.Escape(property.TypeUsage);
				var propertyName = code.Escape(property);
				var typeForRandom = codeK2.EscapeForRandom(property.TypeUsage);
#>
            obj.<#=propertyName#> = RandomHelper.Next<#=typeForRandom#>();
<#			}
#>
            var result = obj.Create();

            return result;
        }
    }
}
